<project name="Ã‰lenchos" default="build" basedir=".">
    <taskdef name="readSemanticVersion" classname="vendor.setbased.phing-extensions.src.Task.ReadSemanticVersionTask"/>
    <property name="BUILD_DIR" value="./build"/>

    <!-- Run composer update and executes various other updates -->
    <target name="composer-update">
        <exec executable="composer" checkreturn="true" passthru="true">
            <arg value="--ansi"/>
            <arg value="update"/>
        </exec>
    </target>

    <!-- Install virtual environment -->
    <target name="venv">
        <exec executable="python3" checkreturn="true" passthru="true">
            <arg value="-m"/>
            <arg value="venv"/>
            <arg value=".venv"/>
        </exec>
        <exec executable="./.venv/bin/python" checkreturn="true" passthru="true">
            <arg value="-m"/>
            <arg value="pip"/>
            <arg value="install"/>
            <arg value="--upgrade"/>
            <arg value="pip"/>
        </exec>
        <exec executable="./.venv/bin/python" checkreturn="true" passthru="true">
            <arg value="-m"/>
            <arg value="pip"/>
            <arg value="install"/>
            <arg value="--upgrade"/>
            <arg value="poetry"/>
        </exec>
        <exec executable="./.venv/bin/poetry" passthru="true" checkreturn="true">
            <arg value="--ansi"/>
            <arg value="lock"/>
        </exec>
        <exec executable="./.venv/bin/poetry" passthru="true" checkreturn="true">
            <arg value="--ansi"/>
            <arg value="install"/>
            <arg value="--no-root"/>
        </exec>
        <exec executable="./.venv/bin/poetry" passthru="true" checkreturn="true">
            <arg value="--ansi"/>
            <arg value="show"/>
            <arg value="--outdated"/>
        </exec>
    </target>

    <!-- Creates a new version/release. -->
    <target name="version">
        <readSemanticVersion file=".version"
                             versionProperty="VERSION"
                             haltOnError="true"/>
        <reflexive>
            <fileset dir=".">
                <include name="setup.py"/>
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp pattern="version=.*" replace="version='${VERSION}',"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
        <gitcommit repository="." message="Release: ${VERSION}" allFiles="true"/>
        <gitpush repository="."/>
        <gittag repository="." name="${VERSION}"/>
        <gitpush repository="." refspec="${VERSION}" quiet="false"/>
    </target>

    <!-- Creates a new distribution using pyproject.toml -->
    <target name="dist">
        <exec command="./.venv/bin/poetry build" passthru="true" checkreturn="true"/>
    </target>

    <!-- Uploads a distribution to PyPI -->
    <target name="upload">
        <exec command="./.venv/bin/poetry publish" passthru="true" checkreturn="true"/>
    </target>

    <!-- All steps for releasing a new version -->
    <target name="release" depends="version,dist,upload"/>

    <!-- Default target -->
    <target name="build">
        <echo msg="And Now for Something Completely Different"/>
    </target>
</project>
